# 1. Задайте строку из набора чисел. Напишите программу,
#    которая покажет большее и меньшее число.
#    В качестве символа-разделителя используйте пробел.


def check(str_list):
    for i, num in enumerate(str_list):
        str_list[i] = num.strip('.,;:?!')
        if not str_list[i].replace("-", "").isdigit():
            return []
    return str_list


def find_max_min(nums_str: str):
    list_nums = nums_str.split()
    right_list = check(list_nums)

    if right_list:
        return min(right_list, key=int), max(right_list, key=int)
    print("The data is incorrect")
    return []


print(*find_max_min(input("Enter the numbers separated by a space: ")))

# Функция strip() – это предопределенная библиотечная функция Python.
# Она используется для возврата копии исходной строки путем удаления начальных и конечных пробелов, символов,
# переданных в функцию strip().
# Помогает удалить символы из начальной и конечной исходной строки на основе символов, переданных в функцию strip().
# Если пользователь не передает никаких символов в функцию,
# по умолчанию она удаляет только пробелы с обоих концов строки.
# Если в начале или в конце исходной строки нет пробела, он возвращает исходную строку, не изменяя ее.
# Если переданный символ не соответствует исходной строке, функция возвращает исходную строку.


# Метод replace() возвращает копию строки, в которой все вхождения подстроки заменяются другой подстрокой.
# Синтаксис: str.replace(old, new [, count])
# Параметры Метод в Python может принимать максимум 3 параметра:
# old ‒ старая подстрока, которую нужно заменить;
# new ‒ новая подстрока, которая заменит старую подстроку;
# count (необязательно) ‒ сколько раз вы хотите заменить старую подстроку новой.
# Примечание: Если число не указано, метод заменяет все вхождения старой подстроки новой.


# Метод isdigit() возвращает True, если все символы в строке являются цифрами. Если нет, возвращается False.


# Метод split() разбивает строку по указанному разделителю и возвращает список строк.
# Синтаксис: str.split([separator [, maxsplit]])
# Метод split() принимает максимум 2 параметра:
# разделитель (необязательно) ‒ это разделитель. Строка разделяется по указанному разделителю.
# Если разделитель не указан, любая строка с пробелами (пробел, новая строка и т.д.) является разделителем.
# maxsplit (необязательно) ‒ maxsplit определяет максимальное количество разделений.
# Значение maxsplit по умолчанию это -1, что означает отсутствие ограничения на количество разделений.
# Возвращаемое значение - команда разбивает строку по разделителю и возвращает список строк.


# Функция enumerate() в Python принимает некий набор данных в качестве параметра и возвращает объект enumerate.
# Этот объект возвращается в формате пар ключ-значение, где ключи — это соответствующие индексы элементов,
# # а значения — сами элементы из переданного набора данных.
# Функция enumerate() принимает два параметра: iterable и start.
# iterable — это итерируемый объект (список, кортеж и т.д.),
# который будет возвращен в виде пронумерованного объекта (объекта enumerate)
# start — это начальный индекс для возвращаемого объекта enumerate.
# Значение по умолчанию равно 0, поэтому, если вы опустите этот параметр,
# в качестве первого индекса будет использоваться 0.

# Пример №1: функция enumerate() с одним параметром
# names = ["John", "Jane", "Doe"]
# enumNames = enumerate(names)
# print(list(enumNames))
# Вывод в консоль: [(0, 'John'), (1, 'Jane'), (2, 'Doe')]

# Пример №2: функция enumerate() с указанием начального индекса
# names = ["John", "Jane", "Doe"]
# enumNames = enumerate(names, 10)
# print(list(enumNames))
# Вывод в консоль: [(10, 'John'), (11, 'Jane'), (12, 'Doe')]

# Если вам нужно адекватным образом отслеживать «индекс элемента» в for-цикле Python,
# то для этого может подойти функция enumerate(), которая позволяет «пересчитать» итерируемый объект.
# Её можно использовать не только для обработки списков, но и для работы с другими типами данных — со строками,
# кортежами,словарями.
# Эта функция принимает два аргумента: итерируемый объект и необязательное начальное значение счётчика.
# Если начальное значение счётчика enumerate() не передаётся — оно, по умолчанию, устанавливается в 0.
# Функция создаёт объект, генерирующий кортежи, состоящие из индекса элемента и самого этого элемента.
#
# scores = [54,67,48,99,27]
# for i, score in enumerate(scores):
#    print(i, score)
#
# Такой код получился гораздо чище кода из предыдущего примера.
# Мы ушли от работы со списком индексов, мы перебираем сами значения, получая к ним прямой доступ в цикле for,
# и видим значения, с которыми работаем, в объявлении цикла.


# Когда мы хотим использовать функцию min() или max() с настраиваемыми объектами,
# мы должны предоставить ключевой аргумент функции, который будет использоваться для сравнения объектов.
# def str_length(s):
#     return len(s)
# print(min('a', 'abc', 'b', key=str_length))
# Вывод в консоль: a.
# и «a», и «b» являются наименьшими аргументами, поэтому первый «a» возвращается функцией min().
